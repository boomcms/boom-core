<?xml version="1.0" encoding="UTF-8"?>

<project name="sledge" default="help">
	<property name="basedir" value="${project.basedir}" />
	<property name="builddir" value="${basedir}/build" />
	<property name="srcdir" value="${basedir}/src" />

	<!-- Default app name -->
	<property name="app.name" value="sledge" />

	<target name="build" depends="clean,prepare">
		<property file="build.properties" />
		
		<!-- Copy the PHP source code to the build directory, removing PHP comments and whitespace as we go. -->
		<copy todir="${builddir}/src"> 
			<filterchain>
				<stripwhitespace />
				<striplinebreaks />
			</filterchain>

			<fileset dir="${basedir}">
				<include name="**/*.php" />
				
				<exclude name="build/**" />
				<exclude name="**/cache/**" />
				
				<!-- Application directories - assets, logs, cache etc. -->
				<exclude name="application/cache/**" />
				<exclude name="application/logs/**" />
				<exclude name="application/assets/**" />
			</fileset>
		</copy>
	
		<copy todir="${basedir}" overwrite="true"> 
			<fileset dir="${builddir}/src">		
				<include name="**/*.php" />
			</fileset>
		</copy>
	</target>
	
	<target name="ci" depends="setup-ci">
		<mkdir dir="${builddir}" mode="0777" />
		<mkdir dir="${builddir}/logs" mode="0777" />
		<mkdir dir="${builddir}/reports" mode="0777" />

		<gitpull
    			repository="${basedir}" 
    			source="origin" refspec="master" 
    			strategy="recursive" keep="true"
    			force="true"  />
		<!-- Update git submodules -->
		<exec command="git submodule update" dir="${basedir}" />

		<phingcall target="create_dirs" />
		<phingcall target="phpunit" />
		<phingcall target="phpcs-ci" />
		<phingcall target="phploc" />
		<!--<phingcall target="build" />-->
	</target>
	
	<!-- clear the build directory -->
	<target name="clean">
		<delete dir="${builddir}/src" />
	</target>
	
	<target name="create-db" description="Create the database and add the changelog table for dbdeploy">
		<property file="build.properties" />
		
		<!-- Create the database -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec
		            command="mysqladmin -h${db.host} -u${db.user} create ${db.name}"
		            dir="${basedir}"
		            checkreturn="true" />
		
		        <exec
		            command="mysql -h${db.host} -u${db.user} ${db.name} &lt; ${basedir}/db/setup.sql"
		            dir="${basedir}"
		            checkreturn="true" />
			</then>
			<else>
		        <exec
		            command="mysqladmin -h${db.host} -u${db.user} -p${db.password} create ${db.name}"
		            dir="${basedir}"
		            checkreturn="true" />
		
		        <exec
		            command="mysql -h${db.host} -u${db.user} -p${db.password} ${db.name} &lt; ${basedir}/db/setup.sql"
		            dir="${basedir}"
		            checkreturn="true" />
			</else>
		</if>
	</target>

	<target name="create-test-db">
		<property file="build.properties" />
		<property name="test.db.name" value="${app.name}_test" />

		<!-- Does the test database exist? -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec command="mysql -h${db.host} -u${db.user} -e &quot;show databases like '${test.db.name}'&quot;" outputProperty='db.exists' />
			</then>
			<else>
		        <exec command="mysql -h${db.host} -u${db.user} -p${db.password} -e &quot;show databases like '${test.db.name}'&quot;" outputProperty='db.exists' />
			</else>
		</if>

		<if>
			<equals arg1="${db.exists}" arg2="" />
			<then>
				<phingcall target="create-db">
					<property name="db.name" value="${test.db.name}" />
				</phingcall>
				<phingcall target="migrate">
					<property name="db.name" value="${test.db.name}" />
				</phingcall>

				<if>
					<equals arg1="${db.password}" arg2="" />
					<then>
				        <exec
				            command="mysql -h${db.host} -u${db.user} ${test.db.name} &lt; ${basedir}/db/hoopid.sql"
				            dir="${basedir}"
				            checkreturn="true" />
					</then>
					<else>
				        <exec
				            command="mysql -h${db.host} -u${db.user} -p${db.password} ${test.db.name} &lt; ${basedir}/db/hoopid.sql"
				            dir="${basedir}"
				            checkreturn="true" />
					</else>
				</if>
			</then>
		</if>
	</target>
	
	<target name="create_dirs">
		<!-- Creates asset, cache, and log dirs which are ignored by git. Used by a few targets -->
		<mkdir dir="${basedir}/application/assets" mode="777" />
		<mkdir dir="${basedir}/application/cache" mode="777" />
		<mkdir dir="${basedir}/application/logs" mode="777" />
	</target>
	
	<!-- Create a pear package for the app. -->
	<target name="dist" depends="build">
		<property file="build.properties" />
		
		<pearpkg2 name="${app.name}" dir="${builddir}/src">
			<option name="outputdirectory" value="${builddir}/src"/>
			<option name="packagefile" value="package.xml"/>
			<option name="packagedirectory" value="${builddir}/src"/>
			<option name="baseinstalldir" value="${app.name}"/>
			<option name="uri" value="pear.thisishoop.com/${app.name}"/>
			<option name="summary" value="test"/>
			<option name="description" value="test"/>
			<option name="apiversion" value="${version}"/>
			<option name="apistability" value="beta"/>
			<option name="releaseversion" value="${version}"/>
			<option name="releasestability" value="beta"/>
			<option name="license" value="none"/>
			<option name="phpdep" value="5.3.0"/>
			<option name="pearinstallerdep" value="1.4.6"/>
			<option name="packagetype" value="php"/>
			<option name="notes" value="test"/>
			
			<mapping name="dir_roles">
				<element key="/" value="www" />
			</mapping>
			
			<mapping name="maintainers">
				<element>
					<element key="handle" value="devteam"/>
					<element key="name" value="Hoop Developers"/>
					<element key="email" value="devteam@hoopassociates.org"/>
					<element key="role" value="lead"/>
				</element>
			</mapping>
			<fileset dir="${builddir}/src">
				<include name="**/**" />
			</fileset>
		</pearpkg2>
		
		<!-- Package it into a tar file -->
		<tar destfile="${builddir}/${app.name}-${version}.tar" basedir="${builddir}/src" />
	</target>
	
	<target name="help">
		<echo message="General Targets"/>
		<echo message="==============="/>
		<echo message="phing dev-setup			Setup for development of the sledge application."/>
		<echo message="phing migrate			Run database update scripts with dbdeploy" />
		<echo message="phing test				Run unit tests."/>
		<echo message="phing update				Pull the latest code from git and run any database migration scripts."/>
		<echo message="" />
		<echo message=""/>
		<echo message="Misc Targets"/>
		<echo message="============"/>
		<echo message="phing ci                Alias task for continuous integration servers"/>
		<echo message="phing dist              Create a pear package of the appliation source code"/>
	</target>
	
    <!-- Database migration task -->
    <target name="migrate" description="Database Migrations" depends="prepare">  
		<tstamp/>
		
		<property file="build.properties" />

        <!-- load the dbdeploy task -->
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask"/>

        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy/scripts/deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="deploy/scripts/undo-${DSTAMP}${TSTAMP}.sql" />

        <!-- generate the deployment scripts -->
        <dbdeploy 
            url="mysql:host=${db.host};dbname=${db.name}" 
            userid="${db.user}" 
            password="${db.password}" 
            dir="${basedir}/db/deltas" 
            outputfile="${builddir}/${build.dbdeploy.deployfile}" 
            undooutputfile="${builddir}/${build.dbdeploy.undofile}" />

        <!-- execute the SQL - Use mysql command line to avoid trouble with large files or many statements and PDO -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec
		            command="mysql -h${db.host} -u${db.user} ${db.name} &lt; ${builddir}/${build.dbdeploy.deployfile}"
		            dir="${basedir}"  />
			</then>
			<else>
		        <exec
		            command="mysql -h${db.host} -u${db.user} -p${db.password} ${db.name} &lt; ${builddir}/${build.dbdeploy.deployfile}"
		            dir="${basedir}" />
			</else>
		</if>
    </target>

	<target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
		<exec executable="phpcs" output="/dev/null">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg value="--standard=Kohana" />
			<arg value="--extensions=php" />
			<arg path="${basedir}/modules/sledge/classes" />
		</exec>
	</target>
	
	<target name="phploc" description="Measure project size using PHPLOC">
		<exec executable="phploc">
			<arg value="--log-csv" />
			<arg value="${basedir}/build/logs/phploc.csv" />
			<arg path="${basedir}" /> <!-- Not ideally here and elsewhere this includes tests -->
		</exec>
	</target>

	<target name="phpunit" depends="create-test-db" description="Run unit tests for CI">
		<exec executable="phpunit" dir="${basedir}">
			<arg value="--bootstrap" />
			<arg value="${basedir}/modules/sledge/tests/bootstrap.php" />
			<arg value="--coverage-clover" />
			<arg value="${builddir}/logs/clover.xml" />
			<arg value="--log-junit" />
			<arg value="${builddir}/logs/junit.xml" />
			<arg value="--configuration" />
			<arg value="${basedir}/modules/sledge/tests/phpunit.xml" />
		</exec>
	</target>

	<target name="prepare">
		<mkdir dir="${builddir}" mode="0777" />
		<mkdir dir="${builddir}/deploy" mode="0777" />
		<mkdir dir="${builddir}/deploy/scripts" mode="0777" />
		<mkdir dir="${builddir}/src" mode="0777" />
	</target>

	<target name="setup-apache">
		<propertyprompt propertyName="vhostdir" promptText="Where do you keep your apache vhost files?" defaultValue="/etc/apache2/vhosts.d" />
		<propertyprompt propertyName="server_name" promptText="What is the ServerName property going to be?" defaultValue="" />
		<propertyprompt propertyName="listen_addr" promptText="What IP address does the server listen on?" defaultValue="" />

		<copy file="${srcdir}/vhost.conf" tofile="${vhostdir}/${server_name}.conf" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="doc_root" value="${basedir}" />
				<token key="environment" value="DEVELOPMENT" />
				<token key="server_name" value="${server_name}" />
				<token key="listen_addr" value="${listen_addr}" />
			  </replacetokens>
			</filterchain>
		</copy>

		<!-- Restart Apache, if the syntax is ok -->
		<exec command="sudo apache2ctl configtest" outputProperty="syntaxok" />
		
		<if>
			<equals arg1="${syntaxok}" arg2="Syntax OK" />

			<then>
				<echo message="Apache config syntax OK, restarting apache" />
				<exec command="apache2ctl -k graceful" />
			</then>
			<else>
				<echo message="There's an error in your apache syntax. Fix errors and restart apache manually" level="warn" />
			</else>
		</if>
	</target>

	<!-- setup the application on a development machine -->
	<target name="setup-ci">
		<!-- Create application directories -->
		<phingcall target="create_dirs" />
		
		<property name="db.user" value="root" />
		<property name="db.password" value="hoopster" />
		<property name="db.host" value="localhost" />
		<property name="db.name" value="db" />
		
		<!-- Copy the build properties file -->
		<copy file="${srcdir}/build.properties.template" tofile="${basedir}/build.properties" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
				<token key="app.name" value="${app.name}" />
			  </replacetokens>
			</filterchain>
		</copy>

		<!-- Copy the database config file -->
		<copy file="${srcdir}/config/instance.php" tofile="${basedir}/application/config/instance.php" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
				<token key="app.name" value="${app.name}" />
			  </replacetokens>
			</filterchain>
		</copy>
		<chmod file="${basedir}/application/config/database.php" mode="0777" />
	</target>
	
	<target name="setup-sphinx">
		<property file="build.properties" />
		
		<copy file="${srcdir}/sphinx.config.template" tofile="/etc/sphinxsearch/sites/${db.name}" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
				<token key="app.path" value="${basedir}" />
			  </replacetokens>
			</filterchain>
		</copy>
	</target>

	<!-- setup the application on a development machine -->
	<target name="setup-dev">
		<!-- This needs to be run as root. Are they root? -->
		<exec command="whoami" outputProperty="user" />
		<if>
			<not>
				<equals arg1="${user}" arg2="root" />
			</not>
			<then>
				<fail message="You should run this as root" />
			</then>
		</if>
		<!-- Create application directories -->
		<phingcall target="create_dirs" />
		
		<echo>We're going to setup your database configuration</echo>
		<propertyprompt propertyName="db.user" promptText="Enter the database username" defaultValue="" />
		<propertyprompt propertyName="db.password" promptText="Enter the database password" defaultValue="" />
		<propertyprompt propertyName="db.host" promptText="Enter the database hostname" defaultValue="localhost" />
		<propertyprompt propertyName="db.name" promptText="Enter the name of the database" defaultValue="" />
		
		<!-- Copy the build properties file -->
		<copy file="${srcdir}/build.properties.template" tofile="${basedir}/build.properties" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
			  </replacetokens>
			</filterchain>
		</copy>

		<!-- Copy the instance config file -->
		<copy file="${srcdir}/config/instance.php" tofile="${basedir}/application/config/instance.php" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
			  </replacetokens>
			</filterchain>
		</copy>
		<chmod file="${basedir}/application/config/instance.php" mode="0777" />

		<!-- Does the database already exist? -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec command="mysql -h${db.host} -u${db.user} -e &quot;show databases like '${db.name}'&quot;" outputProperty='db.exists' />
			</then>
			<else>
		        <exec command="mysql -h${db.host} -u${db.user} -p${db.password} -e &quot;show databases like '${db.name}'&quot;" outputProperty='db.exists' />
			</else>
		</if>

		<if>
			<or>
				<equals arg1="${db.exists}" arg2="" />
			</or>
			<then>
				<phingcall target="create-db" />
				<phingcall target="migrate" />
				<phingcall target="setup-sphinx" />
			</then>
			<else>
				<echo>Database exists, not creating.</echo>
			</else>
		</if>

		<!-- Copy the vhost file into place -->
		<echo>Now we're going to copy your apache vhost file into place.</echo>
		<phingcall target="setup-apache" />
	</target>
	
	<target name="setup-sphinx">
		<property file="build.properties" />
		
		<copy file="${srcdir}/sphinx.config.template" tofile="/etc/sphinxsearch/sites/${app.name}" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
				<token key="app.name" value="${app.name}" />
				<token key="app.path" value="${basedir}" />
			  </replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="sync">
		<taskdef name="sync" classname="phing.tasks.ext.FileSyncTask" />
		<propertyprompt propertyName="target" promptText="Where shall we sync from?" defaultValue="" />

		<if>
			<equals arg1="${target}" arg2="" />

			<then>
				<fail message="You need to tell me where to sync from" />
			</then>
		</if>

		<echo message="Syncing assets" />
		<sync
		    sourcedir="${target}/application/assets/*"
		    destinationdir="${basedir}/application/assets"
		    verbose="true" />
	</target>
	
	<target name="test" depends="create-test-db">
		<exec executable="phpunit" dir="${basedir}" outputproperty="output">
			<arg value="--bootstrap" />
			<arg value="${basedir}/modules/sledge/tests/bootstrap.php" />
			<arg value="--configuration" />
			<arg value="${basedir}/modules/sledge/tests/phpunit.xml" />
		</exec>

		<echo message="${output}" />
	</target>

	<target name="update">
		<!-- git pull the application -->
		<gitpull
    			repository="${basedir}" 
    			source="origin" refspec="master" 
    			strategy="recursive" keep="true"
    			force="true"  />
		<!-- Update git submodules -->
		<exec command="git submodule update --merge --recursive --init" dir="${basedir}" />

		<!-- Run database migrations -->
		<phingcall target="migrate" />
	</target>
	
	<target name="update-sledge">
		<exec command="git checkout master" dir="${basedir}/modules/sledge" />
		<exec command="git pull origin master" dir="${basedir}/modules/sledge" />
	</target>
</project>