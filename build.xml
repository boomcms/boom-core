<?xml version="1.0" encoding="UTF-8"?>

<project name="sledge" default="help">
	<property name="basedir" value="${project.basedir}" />
	<property name="builddir" value="${basedir}/build" />
	<property name="srcdir" value="${basedir}/src" />

	<target name="build" depends="clean,prepare">
		<property file="build.properties" />
		
		<!-- Copy the PHP source code to the build directory, removing PHP comments and whitespace as we go. -->
		<copy todir="${builddir}/src"> 
			<filterchain>
				<stripwhitespace />
				<striplinebreaks />
			</filterchain>

			<fileset dir="${basedir}">
				<include name="**/*.php" />
				
				<exclude name="build/**" />
				<exclude name="**/cache/**" />
				
				<!-- Application directories - assets, logs, cache etc. -->
				<exclude name="application/cache/**" />
				<exclude name="application/logs/**" />
				<exclude name="application/assets/**" />
			</fileset>
		</copy>
		
		<!-- Copy any other files separately because we don't want to strip php comments / whitespace from them. -->
		<copy todir="${builddir}/src"> 
			<fileset dir="${basedir}">
				<include name="**/**" />
				<exclude name="**/*.php" />
				<exclude name="**/cache/**" />
				<include name="apache/vhost.conf" />
				
				<!-- Exclude build files -->
				<exclude name="build/**" />
				<exclude name="**/build.xml" />
				
				<!-- exclude git files -->
				<exclude name="**/.git*" />
				<exclude name="**/.git/**" />
				
				<!-- Exclude userguide module and files -->
				<exclude name="**/*.md" />
				<exclude name="modules/guide/**" />
				
				<!-- Exclude tests and unittest module -->
				<exclude name="modules/unittest/**" />
				<exclude name="**/tests/**" />
				<exclude name="**/phpunit.xml" />
				<exclude name="*.tgz" />
				
				<!-- Application directories - assets, logs, cache etc. -->
				<exclude name="application/logs/**" />
				<exclude name="application/assets/**" />
			</fileset>
		</copy>
		
		<!-- Create the application directories in the build dir -->
		<mkdir dir="${basedir}/application/assets" mode="777" />
		<mkdir dir="${basedir}/application/cache" mode="777" />
		<mkdir dir="${basedir}/application/logs" mode="777" />
	</target>
	
	<target name="ci" depends="dist">
		<phingcall target="test" />
	</target>
	
	<!-- clear the build directory -->
	<target name="clean">
		<delete dir="${builddir}/src" />
	</target>
	
	<target name="create-db" description="Create the database and add the changelog table for dbdeploy">
		<property file="build.properties" />
		
		<!-- Create the database -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec
		            command="mysqladmin -h${db.host} -u${db.user} create ${db.name}"
		            dir="${basedir}"
		            checkreturn="true" />
		
		        <exec
		            command="mysql -h${db.host} -u${db.user} ${db.name} &lt; ${basedir}/db/setup.sql"
		            dir="${basedir}"
		            checkreturn="true" />
			</then>
			<else>
		        <exec
		            command="mysqladmin -h${db.host} -u${db.user} -p${db.password} create ${db.name}"
		            dir="${basedir}"
		            checkreturn="true" />
		
		        <exec
		            command="mysql -h${db.host} -u${db.user} -p${db.password} ${db.name} &lt; ${basedir}/db/setup.sql"
		            dir="${basedir}"
		            checkreturn="true" />
			</else>
		</if>
	</target>
	
	<!-- Create a pear package for the app. -->
	<target name="dist" depends="build">
		<property file="build.properties" />
		
		<pearpkg2 name="${app.name}" dir="${builddir}/src">
			<option name="outputdirectory" value="${builddir}/src"/>
			<option name="packagefile" value="package.xml"/>
			<option name="packagedirectory" value="${builddir}/src"/>
			<option name="baseinstalldir" value="${app.name}"/>
			<option name="uri" value="pear.thisishoop.com/${app.name}"/>
			<option name="summary" value="test"/>
			<option name="description" value="test"/>
			<option name="apiversion" value="${version}"/>
			<option name="apistability" value="beta"/>
			<option name="releaseversion" value="${version}"/>
			<option name="releasestability" value="beta"/>
			<option name="license" value="none"/>
			<option name="phpdep" value="5.3.0"/>
			<option name="pearinstallerdep" value="1.4.6"/>
			<option name="packagetype" value="php"/>
			<option name="notes" value="test"/>
			
			<mapping name="dir_roles">
				<element key="/" value="www" />
			</mapping>
			
			<mapping name="maintainers">
				<element>
					<element key="handle" value="devteam"/>
					<element key="name" value="Hoop Developers"/>
					<element key="email" value="devteam@hoopassociates.org"/>
					<element key="role" value="lead"/>
				</element>
			</mapping>
			<fileset dir="${builddir}/src">
				<include name="**/**" />
			</fileset>
		</pearpkg2>
		
		<!-- Package it into a tar file -->
		<tar destfile="${builddir}/${app.name}-${version}.tar" basedir="${builddir}/src" />
	</target>
	
	<target name="help">
		<echo message="General Targets"/>
		<echo message="==============="/>
		<echo message="phing test              Run unit tests."/>
		<echo message=""/>
		<echo message="Sledge Developer Targets"/>
		<echo message="========================"/>
		<echo message="phing dev-setup         Setup for development of the sledge application."/>
		<echo message=""/>
		<echo message="Misc Targets"/>
		<echo message="============"/>
		<echo message="phing ci                Alias task for continuous integration servers"/>
		<echo message="phing dist              Create a pear package of the appliation source code"/>
	</target>
	
    <!-- Database migration task -->
    <target name="migrate" description="Database Migrations" depends="prepare">  
		<tstamp/>
		
		<property file="build.properties" />

        <!-- load the dbdeploy task -->
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask"/>

        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy/scripts/deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="deploy/scripts/undo-${DSTAMP}${TSTAMP}.sql" />

        <!-- generate the deployment scripts -->
        <dbdeploy 
            url="mysql:host=${db.host};dbname=${db.name}" 
            userid="${db.user}" 
            password="${db.password}" 
            dir="${basedir}/db/deltas" 
            outputfile="${builddir}/${build.dbdeploy.deployfile}" 
            undooutputfile="${builddir}/${build.dbdeploy.undofile}" />

        <!-- execute the SQL - Use mysql command line to avoid trouble with large files or many statements and PDO -->
		<if>
			<equals arg1="${db.password}" arg2="" />
			<then>
		        <exec
		            command="mysql -h${db.host} -u${db.user} ${db.name} &lt; ${builddir}/${build.dbdeploy.deployfile}"
		            dir="${basedir}"
		            checkreturn="true" />
			</then>
			<else>
		        <exec
		            command="mysql -h${db.host} -u${db.user} -p${db.password} ${db.name} &lt; ${builddir}/${build.dbdeploy.deployfile}"
		            dir="${basedir}"
		            checkreturn="true" />
			</else>
		</if>
    </target>

	<target name="prepare">
		<mkdir dir="${builddir}" mode="0766" />
		<mkdir dir="${builddir}/deploy" mode="0766" />
		<mkdir dir="${builddir}/deploy/scripts" mode="0766" />
		<mkdir dir="${builddir}/src" mode="0766" />
	</target>
	
	<!-- setup the application on a development machine -->
	<target name="setup-dev">	
		<!-- Create application directories -->
		<mkdir dir="${basedir}application/assets" mode="0777" />
		<mkdir dir="${basedir}application/cache" mode="0777" />
		<mkdir dir="${basedir}application/logs" mode="0777" />
		
		<echo>We're going to setup your database configuration</echo>
		<propertyprompt propertyName="db.user" promptText="Enter the database username" defaultValue="" />
		<propertyprompt propertyName="db.password" promptText="Enter the database password" defaultValue="" />
		<propertyprompt propertyName="db.host" promptText="Enter the database hostname" defaultValue="localhost" />
		<propertyprompt propertyName="db.name" promptText="Enter the name of the database" defaultValue="" />
		
		<!-- Copy the build properties file -->
		<copy file="${srcdir}/build.properties.template" tofile="${basedir}/build.properties" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
			  </replacetokens>
			</filterchain>
		</copy>	
		
		<!-- Copy the database config file -->
		<copy file="${srcdir}/config/database.php" tofile="${basedir}/application/config/database.php" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
			  </replacetokens>
			</filterchain>
		</copy>
		
		<!-- Copy the vhost file into place -->
		<echo>Now we're going to copy your apache vhost file into place.</echo>
		<propertyprompt propertyName="vhostdir" promptText="Where do you keep your apache vhost files?" defaultValue="/etc/apache2/vhosts.d" />
		<propertyprompt propertyName="server_name" promptText="What is the ServerName property going to be?" defaultValue="" />
		
		<copy file="${srcdir}/vhost.conf" tofile="${vhostdir}/${server_name}.conf" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="doc_root" value="${basedir}" />
				<token key="environment" value="DEVELOPMENT" />
				<token key="server_name" value="${server_name}" />
			  </replacetokens>
			</filterchain>
		</copy>
		
		<!-- Create the database -->
		<phingcall target="create-db" />
		<phingcall target="migrate" />
		<phingcall target="setup-sphinx" />
		
		<echo>Don't forget to restart apache!</echo>
	</target>
	
	<target name="setup-sphinx">
		<property file="build.properties" />
		
		<copy file="${srcdir}/sphinx.config.template" tofile="/etc/sphinxsearch/sites/${app.name}" overwrite="true">
			<filterchain>
			  <replacetokens>
			    <token key="db.user" value="${db.user}" />
				<token key="db.password" value="${db.password}" />
				<token key="db.host" value="${db.host}" />
				<token key="db.name" value="${db.name}" />
				<token key="app.name" value="${app.name}" />
				<token key="app.path" value="${basedir}" />
			  </replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<!-- When unit tests -->
	<target name="test">
		<!-- Make sure directories exist for the reports and code coverage database -->
		<mkdir dir="${builddir}/reports" mode="0766" />
		<mkdir dir="${builddir}/reports/coverage" mode="0766" />
		<mkdir dir="${builddir}/coverage_db" mode="0766" />

		<coverage-setup database="${builddir}/coverage_db/coverage.db">
			<fileset dir="${project.basedir}/classes/">
			    <include name="*.php" />
			    <include name="**/*.php/" />
			</fileset>
		</coverage-setup>

		<phpunit bootstrap="${project.basedir}/tests/bootstrap.ci.php" codecoverage="true">
			<formatter todir="${builddir}/reports" type="xml" />
			
			<batchtest>			
				<!-- Include sledge tests -->
				<fileset dir="${project.basedir}/tests/unit">
					<include name="**/*.php" />	
				</fileset>
				
				<!-- TODO: include app tests -->			
			</batchtest>
		</phpunit>
	</target>

	<target name="update">
		<!-- git pull the application -->
		<gitpull
    			repository="${basedir}" 
    			source="origin" refspec="master" 
    			strategy="recursive" keep="true"
    			force="true"  />
		<!-- Update git submodules -->
		<exec command="git submodule update" dir="${basedir}" />

		<!-- Run database migrations -->
		<phingcall target="migrate" />
	</target>
	
	<target name="update-sledge">
		<exec command="git checkout master" dir="${basedir}/modules/sledge" />
		<exec command="git pull origin master" dir="${basedir}/modules/sledge" />
	</target>
</project>